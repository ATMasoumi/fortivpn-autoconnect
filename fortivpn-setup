#!/bin/bash

# FortiVPN Setup Wizard
# Interactive setup for FortiVPN Auto-Connect

set -e

CONFIG_DIR="$HOME/.fortivpn"
CONFIG_FILE="$CONFIG_DIR/forticonfig"

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
NC='\033[0m' # No Color

# Function to check system requirements
check_system_requirements() {
    echo -e "${CYAN}🔍 Checking System Requirements${NC}"
    echo "==============================="
    echo ""
    
    local all_good=true
    
    # Check Homebrew
    if command -v brew >/dev/null 2>&1; then
        echo -e "${GREEN}✅ Homebrew${NC}"
    else
        echo -e "${RED}❌ Homebrew not installed${NC}"
        echo "   Install from: https://brew.sh"
        all_good=false
    fi
    
    # Check openfortivpn
    if command -v openfortivpn >/dev/null 2>&1; then
        echo -e "${GREEN}✅ openfortivpn${NC}"
    else
        echo -e "${YELLOW}⚠️  openfortivpn (will install)${NC}"
    fi
    
    # Check expect
    if command -v expect >/dev/null 2>&1; then
        echo -e "${GREEN}✅ expect${NC}"
    else
        echo -e "${YELLOW}⚠️  expect (will install)${NC}"
    fi
    
    # Check Terminal Full Disk Access with interactive guidance
    echo "🔐 Checking system permissions..."
    local messages_db="$HOME/Library/Messages/chat.db"
    
    check_full_disk_access() {
        if [[ -f "$messages_db" ]] && sqlite3 "$messages_db" "SELECT COUNT(*) FROM message LIMIT 1;" >/dev/null 2>&1; then
            return 0  # Has access
        else
            return 1  # No access
        fi
    }
    
    if check_full_disk_access; then
        echo -e "${GREEN}✅ Terminal has Full Disk Access (can read Messages database)${NC}"
        
        # Additional check for recent messages
        local recent_count=$(sqlite3 "$messages_db" "SELECT COUNT(*) FROM message WHERE date > strftime('%s', 'now', '-24 hours') * 1000000000;" 2>/dev/null || echo "0")
        if [[ "$recent_count" -gt 0 ]]; then
            echo -e "${GREEN}✅ OTP detection ready ($recent_count recent messages)${NC}"
        fi
    else
        echo -e "${RED}❌ Terminal needs Full Disk Access to read Messages database${NC}"
        echo ""
        echo -e "${YELLOW}📋 Full Disk Access is required for automatic OTP code detection.${NC}"
        echo ""
        echo "Would you like to be guided through enabling Full Disk Access?"
        echo "1) Yes - Open settings and wait for me to enable it"
        echo "2) No - Skip this requirement (manual OTP entry required)"
        echo ""
        read -p "Choose option (1/2): " fda_choice
        
        case "$fda_choice" in
            1)
                echo ""
                echo -e "${CYAN}🔧 Opening Full Disk Access settings...${NC}"
                echo ""
                
                # Open System Preferences to the Full Disk Access section
                if [[ $(sw_vers -productVersion | cut -d. -f1) -ge 13 ]]; then
                    # macOS 13+ (Ventura and later) - new System Settings
                    open "x-apple.systempreferences:com.apple.preference.security?Privacy_AllFiles"
                else
                    # macOS 12 and earlier - old System Preferences
                    open "x-apple.systempreferences:com.apple.preference.security?Privacy_AllFiles"
                fi
                
                echo -e "${WHITE}📝 Please follow these steps in the settings window that just opened:${NC}"
                echo ""
                echo "   1. 🔓 Click the lock icon (bottom left) and authenticate with Touch ID/password"
                echo "   2. 🔍 Look for 'Terminal' in the list of applications"
                echo "   3. ✅ Toggle ON the switch next to 'Terminal' to enable Full Disk Access"
                echo "   4. ✅ Verify the toggle is blue/enabled (you may see VS Code, Warp, etc. as well)"
                echo "   5. 🔄 Close System Settings/Preferences"
                echo ""
                echo -e "${BLUE}💡 Note: You'll see a list with toggle switches for apps like Terminal, VS Code, Warp, etc.${NC}"
                echo ""
                echo -e "${YELLOW}⚠️  Important: You may need to restart Terminal after enabling access!${NC}"
                echo ""
                
                # Wait for user to complete the process
                echo "Please complete the steps above, then press ENTER to continue..."
                read -r
                
                # Check again in a loop with retries
                echo ""
                echo "🔄 Checking Full Disk Access..."
                local retry_count=0
                local max_retries=5
                
                while [[ $retry_count -lt $max_retries ]]; do
                    if check_full_disk_access; then
                        echo -e "${GREEN}✅ Excellent! Terminal now has Full Disk Access${NC}"
                        
                        # Test message reading capability
                        local recent_count=$(sqlite3 "$messages_db" "SELECT COUNT(*) FROM message WHERE date > strftime('%s', 'now', '-24 hours') * 1000000000;" 2>/dev/null || echo "0")
                        if [[ "$recent_count" -gt 0 ]]; then
                            echo -e "${GREEN}✅ OTP detection ready${NC}"
                        else
                            echo -e "${YELLOW}⚠️  No recent messages found - make sure you receive SMS OTP codes${NC}"
                        fi
                        break
                    else
                        ((retry_count++))
                        if [[ $retry_count -lt $max_retries ]]; then
                            echo -e "${YELLOW}⚠️  Full Disk Access not detected yet (attempt $retry_count/$max_retries)${NC}"
                            echo ""
                            echo "If you haven't completed the steps yet, please do so now."
                            echo "If you completed them, you might need to restart Terminal."
                            echo ""
                            echo "Options:"
                            echo "1) I completed the steps - check again"
                            echo "2) I need to restart Terminal - exit setup"
                            echo "3) Skip this requirement for now"
                            echo ""
                            read -p "Choose option (1/2/3): " retry_choice
                            
                            case "$retry_choice" in
                                1)
                                    echo "🔄 Checking again..."
                                    continue
                                    ;;
                                2)
                                    echo ""
                                    echo -e "${YELLOW}🔄 Please restart Terminal and run 'fortivpn-setup' again.${NC}"
                                    echo "After restarting, the Full Disk Access should be detected."
                                    exit 0
                                    ;;
                                3)
                                    echo -e "${YELLOW}⚠️  Skipping Full Disk Access requirement${NC}"
                                    echo "   Note: You'll need to enter OTP codes manually during connection"
                                    all_good=false
                                    break
                                    ;;
                                *)
                                    echo "Invalid choice, checking again..."
                                    continue
                                    ;;
                            esac
                        else
                            echo -e "${RED}❌ Full Disk Access still not detected after $max_retries attempts${NC}"
                            echo ""
                            echo "This might happen if:"
                            echo "• You haven't restarted Terminal after enabling access"
                            echo "• The wrong application was added (make sure it's Terminal.app)"
                            echo "• System security settings need time to take effect"
                            echo ""
                            echo "You can:"
                            echo "1) Restart Terminal and run setup again"
                            echo "2) Continue without Full Disk Access (manual OTP entry)"
                            echo ""
                            read -p "Continue without Full Disk Access? (y/N): " continue_without
                            if [[ "$continue_without" =~ ^[Yy] ]]; then
                                echo -e "${YELLOW}⚠️  Continuing without Full Disk Access${NC}"
                                echo "   Note: You'll need to enter OTP codes manually during connection"
                                all_good=false
                            else
                                echo -e "${RED}❌ Setup cancelled. Please restart Terminal and try again.${NC}"
                                exit 1
                            fi
                            break
                        fi
                    fi
                done
                ;;
            2)
                echo -e "${YELLOW}⚠️  Skipping Full Disk Access requirement${NC}"
                echo "   Note: You'll need to enter OTP codes manually during connection"
                all_good=false
                ;;
            *)
                echo "Invalid choice. Skipping Full Disk Access requirement."
                all_good=false
                ;;
        esac
    fi
    
    # Check Touch ID for sudo
    echo "🔑 Checking Touch ID for sudo..."
    local pam_tid_configured=false
    local sudo_config="/etc/pam.d/sudo"
    
    if [[ -f "$sudo_config" ]] && grep -q "pam_tid.so" "$sudo_config" 2>/dev/null; then
        echo -e "${GREEN}✅ Touch ID is configured for sudo${NC}"
        pam_tid_configured=true
    else
        echo -e "${YELLOW}⚠️  Touch ID not configured for sudo${NC}"
        echo "   To enable Touch ID for sudo:"
        echo "   1. Run: sudo vim /etc/pam.d/sudo"
        echo "   2. Add this line at the top: auth sufficient pam_tid.so"
        echo "   3. Save and exit"
        echo "   Alternative: Continue with password authentication"
    fi
    
    # Test if current sudo session works
    if sudo -n true 2>/dev/null; then
        echo -e "${GREEN}✅ Current sudo session is active${NC}"
    elif [[ "$pam_tid_configured" == true ]]; then
        echo -e "${YELLOW}⚠️  Touch ID configured but sudo session not active${NC}"
        echo "   This is normal - Touch ID will prompt when needed"
    else
        echo -e "${YELLOW}⚠️  No active sudo session (password will be required)${NC}"
    fi
    
    # Check Messages app and configuration
    echo "📱 Checking Messages app..."
    local messages_app_path=""
    if [[ -d "/System/Applications/Messages.app" ]]; then
        messages_app_path="/System/Applications/Messages.app"
    elif [[ -d "/Applications/Messages.app" ]]; then
        messages_app_path="/Applications/Messages.app"
    fi
    
    if [[ -n "$messages_app_path" ]]; then
        echo -e "${GREEN}✅ Messages app${NC}"
        
        # Check for recent SMS messages (potential OTP sources)
        local messages_db="$HOME/Library/Messages/chat.db"
        if [[ -f "$messages_db" ]]; then
            local sms_count=$(sqlite3 "$messages_db" "SELECT COUNT(*) FROM handle WHERE service = 'SMS';" 2>/dev/null || echo "0")
            if [[ "$sms_count" -gt 0 ]]; then
                echo -e "${GREEN}✅ SMS contacts configured${NC}"
            fi
        fi
    else
        echo -e "${RED}❌ Messages app not found${NC}"
        echo "   Required for automatic OTP code extraction"
        all_good=false
    fi
    
    echo ""
    
    if [[ "$all_good" != true ]]; then
        echo -e "${YELLOW}⚠️  Some requirements are missing. Please fix the issues above before continuing.${NC}"
        echo ""
        read -p "Continue anyway? (y/N): " continue_anyway
        if [[ ! "$continue_anyway" =~ ^[Yy] ]]; then
            echo -e "${RED}❌ Setup cancelled. Please fix the requirements and try again.${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}✅ All system requirements are met!${NC}"
    fi
    echo ""
}

echo -e "${CYAN}🔧 FortiVPN Auto-Connect Setup Wizard${NC}"
echo "======================================"
echo ""

# Create config directory if it doesn't exist
if [[ ! -d "$CONFIG_DIR" ]]; then
    echo "📁 Creating configuration directory: $CONFIG_DIR"
    mkdir -p "$CONFIG_DIR"
fi

# Run system requirements check on startup unless --skip-check is passed
if [[ "${1:-}" != "--skip-check" ]] && [[ "${1:-}" != "--status" ]] && [[ "${1:-}" != "--help" ]]; then
    check_system_requirements
fi

# Function to show current status
show_status() {
    echo "📊 Current Setup Status:"
    echo "========================"
    
    # Check config file
    if [[ -f "$CONFIG_FILE" ]]; then
        echo "✅ Configuration file exists: $CONFIG_FILE"
        echo "   Current settings:"
        cat "$CONFIG_FILE" | sed 's/^/   /'
    else
        echo "❌ Configuration file missing: $CONFIG_FILE"
    fi
    
    # Check openfortivpn
    if command -v openfortivpn >/dev/null 2>&1; then
        echo "✅ openfortivpn is installed"
    else
        echo "❌ openfortivpn is not installed"
        echo "   Install with: brew install openfortivpn"
    fi
    
    # Check expect
    if command -v expect >/dev/null 2>&1; then
        echo "✅ expect is installed"
    else
        echo "❌ expect is not installed"
        echo "   Install with: brew install expect"
    fi
    
    # Check sudo Touch ID
    if sudo -n true 2>/dev/null; then
        echo "✅ sudo authentication cached"
    else
        echo "⚠️  sudo Touch ID not configured or authentication needed"
        echo "   Configure Touch ID for sudo in System Preferences"
    fi
    
    # Check Messages permissions
    if [[ -d "/System/Library/Messages" ]] || [[ -d "/Applications/Messages.app" ]]; then
        echo "✅ Messages app available"
        echo "⚠️  Grant Full Disk Access to Terminal in System Preferences"
    fi
    
    echo ""
}

# Function to configure VPN settings
configure_vpn() {
    echo "🔧 VPN Configuration Setup"
    echo "=========================="
    echo ""
    
    echo "Please enter your VPN connection details:"
    echo ""
    
    # Validate server hostname/IP
    while true; do
        read -p "VPN Server (hostname or IP): " vpn_host
        if [[ -n "$vpn_host" ]]; then
            # Basic validation - check if it looks like a valid hostname or IP
            if [[ "$vpn_host" =~ ^[a-zA-Z0-9.-]+$ ]]; then
                break
            else
                echo "❌ Invalid server format. Please enter a valid hostname or IP address."
            fi
        else
            echo "❌ Server address cannot be empty."
        fi
    done
    
    # Port with smart defaults
    echo ""
    echo "Common FortiGate ports:"
    echo "• 443 (HTTPS, most common)"
    echo "• 4443 (Alternative HTTPS)"
    echo "• 10443 (Alternative)"
    echo ""
    
    while true; do
        read -p "Port (default: 443): " vpn_port
        vpn_port=${vpn_port:-443}
        
        # Validate port number
        if [[ "$vpn_port" =~ ^[0-9]+$ ]] && [ "$vpn_port" -ge 1 ] && [ "$vpn_port" -le 65535 ]; then
            break
        else
            echo "❌ Invalid port. Please enter a number between 1 and 65535."
        fi
    done
    
    # Username validation
    while true; do
        read -p "Username: " vpn_username
        if [[ -n "$vpn_username" ]]; then
            break
        else
            echo "❌ Username cannot be empty."
        fi
    done
    
    # Password (with confirmation option)
    while true; do
        read -s -p "Password: " vpn_password
        echo ""
        if [[ -n "$vpn_password" ]]; then
            read -s -p "Confirm password: " vpn_password_confirm
            echo ""
            if [[ "$vpn_password" == "$vpn_password_confirm" ]]; then
                break
            else
                echo "❌ Passwords don't match. Please try again."
            fi
        else
            echo "❌ Password cannot be empty."
        fi
    done
    
    echo ""
    echo "📝 Creating initial configuration file..."
    
    # Create initial config without trusted certificate
    cat > "$CONFIG_FILE" << EOF
host = $vpn_host
port = $vpn_port
username = $vpn_username
password = $vpn_password
EOF
    
    # Set secure permissions
    chmod 600 "$CONFIG_FILE"
    
    echo "✅ Initial configuration saved to: $CONFIG_FILE"
    echo "🔒 File permissions set to 600 (owner read/write only)"
    echo ""
    
    # Now attempt to auto-detect trusted certificate
    echo "🔍 Auto-detecting trusted certificate..."
    echo "This will make a test connection to retrieve the server certificate."
    echo ""
    
    detect_trusted_certificate
}

# Function to detect trusted certificate automatically
detect_trusted_certificate() {
    echo "🔐 Attempting to auto-detect trusted certificate..."
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "❌ Configuration file not found. Please configure VPN settings first."
        return 1
    fi
    
    # Read config to show connection attempt details
    local vpn_host=$(grep "^host = " "$CONFIG_FILE" | cut -d' ' -f3)
    local vpn_port=$(grep "^port = " "$CONFIG_FILE" | cut -d' ' -f3)
    
    echo "🔄 Testing connection to: $vpn_host:$vpn_port"
    echo "⚠️  This will attempt to connect and capture the certificate information."
    echo "   The connection will likely fail with authentication - this is expected!"
    echo ""
    
    # Create a temporary output file
    local temp_output="/tmp/fortivpn_cert_detect_$$.log"
    local temp_config="/tmp/fortivpn_config_test_$$.conf"
    
    # Create a temporary config without password for certificate detection
    grep -v "^password = " "$CONFIG_FILE" > "$temp_config"
    echo "password = dummy" >> "$temp_config"
    
    echo "🔄 Starting certificate detection..."
    echo ""
    
    # Try multiple approaches to get certificate information
    local cert_hash=""
    
    # Method 1: Direct openfortivpn with verbose output
    echo "Attempting certificate detection..."
    perl -e 'alarm 20; exec @ARGV' openfortivpn --config="$temp_config" -v 2>&1 | tee "$temp_output" > /dev/null || true
    
    # Look for certificate hash patterns
    if grep -q "trusted-cert" "$temp_output"; then
        cert_hash=$(grep "trusted-cert" "$temp_output" | sed -n 's/.*trusted-cert[[:space:]]*=[[:space:]]*\([a-fA-F0-9:]*\).*/\1/p' | head -1)
        echo "✅ Found certificate via trusted-cert output: $cert_hash"
    fi
    
    # Method 2: Look for certificate fingerprint patterns
    if [[ -z "$cert_hash" ]]; then
        cert_hash=$(grep -oE "([a-fA-F0-9]{2}[:]){19}[a-fA-F0-9]{2}" "$temp_output" | head -1)
        if [[ -n "$cert_hash" ]]; then
            echo "✅ Found certificate fingerprint: $cert_hash"
        fi
    fi
    
    # Method 3: Alternative pattern matching
    if [[ -z "$cert_hash" ]]; then
        # Look for SHA256 or SHA1 patterns
        cert_hash=$(grep -i "fingerprint\|certificate\|sha256\|sha1" "$temp_output" | grep -oE "([a-fA-F0-9]{2}[:]){15,31}[a-fA-F0-9]{2}" | head -1)
        if [[ -n "$cert_hash" ]]; then
            echo "✅ Found certificate via alternative pattern: $cert_hash"
        fi
    fi
    
    # Method 4: Try openssl to get server certificate directly
    if [[ -z "$cert_hash" ]]; then
        local ssl_output="/tmp/ssl_cert_$$.txt"
        perl -e 'alarm 10; exec @ARGV' openssl s_client -connect "$vpn_host:$vpn_port" -servername "$vpn_host" 2>/dev/null | openssl x509 -fingerprint -sha256 -noout 2>/dev/null | cut -d= -f2 > "$ssl_output" 2>/dev/null || true
        
        if [[ -s "$ssl_output" ]]; then
            cert_hash=$(cat "$ssl_output" | tr -d ' ')
            echo "✅ Retrieved certificate via OpenSSL: $cert_hash"
        fi
        rm -f "$ssl_output"
    fi
    
    # Process the certificate if found
    if [[ -n "$cert_hash" ]]; then
        echo ""
        echo "🎉 Successfully detected trusted certificate!"
        echo "   Certificate: $cert_hash"
        echo ""
        echo "📝 Adding certificate to configuration..."
        
        # Check if certificate already exists in config
        if grep -q "trusted-cert = " "$CONFIG_FILE"; then
            echo "⚠️  Configuration already contains a trusted certificate."
            echo "   Current: $(grep "trusted-cert = " "$CONFIG_FILE" | cut -d' ' -f3)"
            echo "   New:     $cert_hash"
            echo ""
            read -p "Replace existing certificate? (y/N): " replace_cert
            if [[ "$replace_cert" =~ ^[Yy] ]]; then
                # Replace existing certificate
                sed -i '' "s/trusted-cert = .*/trusted-cert = $cert_hash/" "$CONFIG_FILE"
                echo "✅ Certificate replaced in configuration"
            else
                echo "⚠️  Keeping existing certificate"
            fi
        else
            # Add new certificate to config file
            echo "trusted-cert = $cert_hash" >> "$CONFIG_FILE"
            echo "✅ Certificate added to configuration"
        fi
        
        echo ""
        echo "📄 Updated configuration:"
        cat "$CONFIG_FILE" | sed 's/^password = .*/password = [HIDDEN]/' | sed 's/^/   /'
        echo ""
        echo "🎯 Certificate auto-detection completed successfully!"
        
    else
        echo ""
        echo "⚠️  Could not auto-detect certificate from any method."
        echo ""
        echo "📋 Debug information:"
        echo "   Connection log (last 20 lines):"
        tail -20 "$temp_output" | sed 's/^/   /' 2>/dev/null || echo "   (No log output available)"
        echo ""
        echo "🔧 Possible solutions:"
        echo "   1. Verify server address and port are correct"
        echo "   2. Check if server is reachable: ping $vpn_host"
        echo "   3. Test port connectivity: nc -zv $vpn_host $vpn_port"
        echo "   4. Try connecting manually once to accept certificate:"
        echo "      openfortivpn --config=\"$CONFIG_FILE\""
        echo "   5. Add trusted-cert manually after first successful connection"
        echo ""
        
        read -p "Continue setup anyway? (y/N): " continue_anyway
        if [[ ! "$continue_anyway" =~ ^[Yy] ]]; then
            echo "❌ Setup paused. You can:"
            echo "   • Fix connectivity issues and try again"
            echo "   • Run 'fortivpn-setup --configure' to reconfigure"
            echo "   • Run a manual connection to get the certificate"
            rm -f "$temp_output" "$temp_config"
            return 1
        else
            echo "⚠️  Continuing without certificate. You may need to add it manually later."
        fi
    fi
    
    # Clean up temporary files
    rm -f "$temp_output" "$temp_config"
    echo ""
}

# Function to install dependencies
install_dependencies() {
    echo "📦 Installing Dependencies"
    echo "========================="
    echo ""
    
    if ! command -v brew >/dev/null 2>&1; then
        echo "❌ Homebrew is not installed"
        echo ""
        echo "🍺 Installing Homebrew..."
        echo "This will install Homebrew (the package manager for macOS)"
        echo ""
        read -p "Install Homebrew now? (y/N): " install_brew
        
        if [[ "$install_brew" =~ ^[Yy] ]]; then
            echo "🔄 Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            
            # Add Homebrew to PATH for current session
            if [[ -f "/opt/homebrew/bin/brew" ]]; then
                echo "✅ Homebrew installed (Apple Silicon Mac detected)"
                export PATH="/opt/homebrew/bin:$PATH"
            elif [[ -f "/usr/local/bin/brew" ]]; then
                echo "✅ Homebrew installed (Intel Mac detected)"
                export PATH="/usr/local/bin:$PATH"
            else
                echo "❌ Homebrew installation may have failed"
                echo "   Please install manually from: https://brew.sh"
                return 1
            fi
        else
            echo "❌ Homebrew is required. Please install from: https://brew.sh"
            return 1
        fi
    else
        echo "✅ Homebrew is already installed"
    fi
    
    echo ""
    echo "📦 Installing required packages..."
    
    local packages_needed=()
    
    # Check openfortivpn
    if ! command -v openfortivpn >/dev/null 2>&1; then
        packages_needed+=("openfortivpn")
        echo "⚠️  openfortivpn (will install)"
    else
        echo "✅ openfortivpn"
    fi
    
    # Check expect
    if ! command -v expect >/dev/null 2>&1; then
        packages_needed+=("expect")
        echo "⚠️  expect (will install)"
    else
        echo "✅ expect"
    fi
    
    # Install missing packages
    if [[ ${#packages_needed[@]} -gt 0 ]]; then
        echo ""
        echo "🔄 Installing: ${packages_needed[*]}"
        if brew install "${packages_needed[@]}" >/dev/null 2>&1; then
            echo "✅ Dependencies installed"
        else
            echo "❌ Installation failed"
            echo "   Try: brew update && brew install ${packages_needed[*]}"
            return 1
        fi
    else
        echo "✅ All dependencies installed"
    fi
    
    echo ""
    echo "🔧 Checking additional tools..."
    
    # Check sqlite3 (usually pre-installed on macOS)
    if command -v sqlite3 >/dev/null 2>&1; then
        echo "✅ sqlite3"
    else
        echo "⚠️  sqlite3 missing - install Xcode Command Line Tools"
    fi
    
    # Check openssl (usually available)
    if command -v openssl >/dev/null 2>&1; then
        echo "✅ openssl"
    else
        echo "⚠️  openssl missing - installing..."
        brew install openssl || echo "❌ Failed to install openssl"
    fi
    
    echo ""
    echo "✅ Dependency installation completed!"
    echo ""
}

# Function to test connection
test_connection() {
    echo "🧪 Testing VPN Connection"
    echo "========================="
    echo ""
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "❌ Configuration file not found. Please configure VPN settings first."
        return 1
    fi
    
    echo "This will test your VPN connection settings..."
    echo "⚠️  You may need to enter a 2FA code manually for this test"
    echo ""
    read -p "Continue with test? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[Yy] ]]; then
        echo "🔄 Starting test connection..."
        timeout 30 openfortivpn --config="$CONFIG_FILE" --no-routes >/dev/null 2>&1 &
        local test_pid=$!
        echo "⏳ Connection test started (PID: $test_pid)"
        sleep 5
        if kill -0 $test_pid 2>/dev/null; then
            echo "✅ Test connection established successfully"
            kill $test_pid 2>/dev/null || true
        else
            echo "⚠️  Test completed - check that your credentials are correct"
        fi
    fi
    echo ""
}

# Function to show usage instructions
show_usage() {
    echo -e "${BLUE}📖 Usage Instructions${NC}"
    echo "===================="
    echo ""
    echo -e "${CYAN}Command line options:${NC}"
    echo "  fortivpn-setup                    # Interactive setup wizard"
    echo "  fortivpn-setup --status           # Show current status"
    echo "  fortivpn-setup --configure        # Configure VPN settings only"
    echo "  fortivpn-setup --install-deps     # Install dependencies only"
    echo "  fortivpn-setup --complete         # Run complete automated setup"
    echo "  fortivpn-setup --skip-check       # Skip system requirements check"
    echo "  fortivpn-setup --help             # Show this help"
    echo ""
    echo -e "${CYAN}After setup is complete, you can:${NC}"
    echo ""
    echo "1. Connect to VPN:"
    echo -e "${GREEN}   forti${NC}                          # Short command"
    echo -e "${GREEN}   fortivpn-autoconnect${NC}          # Full command"
    echo ""
    echo "2. Check status (if needed):"
    echo "   fortivpn-setup --status"
    echo ""
    echo "3. Reconfigure settings:"
    echo "   fortivpn-setup --configure"
    echo ""
    echo "4. Install missing dependencies:"
    echo "   fortivpn-setup --install-deps"
    echo ""
    echo -e "${CYAN}The auto-connect script will:${NC}"
    echo -e "${GREEN}✓${NC} Automatically detect 2FA prompts"
    echo -e "${GREEN}✓${NC} Extract OTP codes from Messages app"
    echo -e "${GREEN}✓${NC} Handle authentication with Touch ID"
    echo -e "${GREEN}✓${NC} Establish VPN tunnel"
    echo -e "${GREEN}✓${NC} Show colored output for better visibility"
    echo ""
    echo -e "${YELLOW}Important: Make sure to:${NC}"
    echo "• Grant Full Disk Access to Terminal in System Preferences"
    echo "• Enable Touch ID for sudo authentication (optional)"
    echo "• Have Messages app configured to receive OTP codes"
    echo "• Configure SMS forwarding from iPhone if using iPhone"
    echo ""
}

# Main menu
show_menu() {
    echo -e "${CYAN}What would you like to do?${NC}"
    echo ""
    echo -e "${WHITE}1)${NC} Show current status"
    echo -e "${WHITE}2)${NC} Configure VPN settings"
    echo -e "${WHITE}3)${NC} Install dependencies"
    echo -e "${WHITE}4)${NC} Test connection"
    echo -e "${WHITE}5)${NC} Show usage instructions"
    echo -e "${WHITE}6)${NC} Complete setup (all steps)"
    echo -e "${WHITE}0)${NC} Exit"
    echo ""
}

# Parse command line arguments
case "${1:-}" in
    --status)
        show_status
        exit 0
        ;;
    --configure)
        configure_vpn
        exit 0
        ;;
    --install-deps)
        install_dependencies
        exit 0
        ;;
    --skip-check)
        echo -e "${YELLOW}⚠️  Skipping system requirements check${NC}"
        echo ""
        ;;
    --help)
        show_usage
        exit 0
        ;;
esac

# Interactive mode
if [[ "${1:-}" == "--complete" ]]; then
    # Automated complete setup
    echo -e "${CYAN}🚀 Running complete setup...${NC}"
    echo ""
    install_dependencies
    configure_vpn
    show_status
    show_usage
else
    # Interactive menu
    while true; do
        show_menu
        read -p "Enter your choice [0-6]: " choice
        echo ""
        
        case $choice in
            1)
                show_status
                ;;
            2)
                configure_vpn
                ;;
            3)
                install_dependencies
                ;;
            4)
                test_connection
                ;;
            5)
                show_usage
                ;;
            6)
                echo -e "${CYAN}🚀 Running complete setup...${NC}"
                echo ""
                install_dependencies
                configure_vpn
                show_status
                show_usage
                break
                ;;
            0)
                echo -e "${GREEN}👋 Setup wizard exiting${NC}"
                break
                ;;
            *)
                echo -e "${RED}❌ Invalid choice. Please enter 0-6.${NC}"
                echo ""
                ;;
        esac
        
        if [[ $choice != 0 ]]; then
            echo ""
            read -p "Press Enter to continue..."
            echo ""
        fi
    done
fi
