#!/bin/bash

# FortiVPN Setup Wizard
# Interactive setup for FortiVPN Auto-Connect

set -e

CONFIG_DIR="$HOME/.fortivpn"
CONFIG_FILE="$CONFIG_DIR/forticonfig"

echo "üîß FortiVPN Auto-Connect Setup Wizard"
echo "======================================"
echo ""

# Create config directory if it doesn't exist
if [[ ! -d "$CONFIG_DIR" ]]; then
    echo "üìÅ Creating configuration directory: $CONFIG_DIR"
    mkdir -p "$CONFIG_DIR"
fi

# Function to show current status
show_status() {
    echo "üìä Current Setup Status:"
    echo "========================"
    
    # Check config file
    if [[ -f "$CONFIG_FILE" ]]; then
        echo "‚úÖ Configuration file exists: $CONFIG_FILE"
        echo "   Current settings:"
        cat "$CONFIG_FILE" | sed 's/^/   /'
    else
        echo "‚ùå Configuration file missing: $CONFIG_FILE"
    fi
    
    # Check openfortivpn
    if command -v openfortivpn >/dev/null 2>&1; then
        echo "‚úÖ openfortivpn is installed"
    else
        echo "‚ùå openfortivpn is not installed"
        echo "   Install with: brew install openfortivpn"
    fi
    
    # Check expect
    if command -v expect >/dev/null 2>&1; then
        echo "‚úÖ expect is installed"
    else
        echo "‚ùå expect is not installed"
        echo "   Install with: brew install expect"
    fi
    
    # Check sudo Touch ID
    if sudo -n true 2>/dev/null; then
        echo "‚úÖ sudo authentication cached"
    else
        echo "‚ö†Ô∏è  sudo Touch ID not configured or authentication needed"
        echo "   Configure Touch ID for sudo in System Preferences"
    fi
    
    # Check Messages permissions
    if [[ -d "/System/Library/Messages" ]] || [[ -d "/Applications/Messages.app" ]]; then
        echo "‚úÖ Messages app available"
        echo "‚ö†Ô∏è  Grant Full Disk Access to Terminal in System Preferences"
    fi
    
    echo ""
}

# Function to configure VPN settings
configure_vpn() {
    echo "üîß VPN Configuration Setup"
    echo "=========================="
    echo ""
    
    echo "Please enter your VPN connection details:"
    echo ""
    
    read -p "VPN Server (host): " vpn_host
    read -p "Port (default 443): " vpn_port
    vpn_port=${vpn_port:-443}
    read -p "Username: " vpn_username
    read -s -p "Password: " vpn_password
    echo ""
    read -p "Trusted Certificate Hash (optional): " vpn_cert
    
    echo ""
    echo "üìù Creating configuration file..."
    
    cat > "$CONFIG_FILE" << EOF
host = $vpn_host
port = $vpn_port
username = $vpn_username
password = $vpn_password
EOF
    
    if [[ -n "$vpn_cert" ]]; then
        echo "trusted-cert = $vpn_cert" >> "$CONFIG_FILE"
    fi
    
    # Set secure permissions
    chmod 600 "$CONFIG_FILE"
    
    echo "‚úÖ Configuration saved to: $CONFIG_FILE"
    echo "üîí File permissions set to 600 (owner read/write only)"
    echo ""
}

# Function to install dependencies
install_dependencies() {
    echo "üì¶ Installing Dependencies"
    echo "========================="
    echo ""
    
    if ! command -v brew >/dev/null 2>&1; then
        echo "‚ùå Homebrew is not installed"
        echo "Please install Homebrew first: https://brew.sh"
        return 1
    fi
    
    echo "Installing openfortivpn and expect..."
    if brew install openfortivpn expect; then
        echo "‚úÖ Dependencies installed successfully"
    else
        echo "‚ùå Failed to install dependencies"
        return 1
    fi
    echo ""
}

# Function to test connection
test_connection() {
    echo "üß™ Testing VPN Connection"
    echo "========================="
    echo ""
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "‚ùå Configuration file not found. Please configure VPN settings first."
        return 1
    fi
    
    echo "This will test your VPN connection settings..."
    echo "‚ö†Ô∏è  You may need to enter a 2FA code manually for this test"
    echo ""
    read -p "Continue with test? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[Yy] ]]; then
        echo "üîÑ Starting test connection..."
        if timeout 30 openfortivpn --config="$CONFIG_FILE" --no-routes 2>&1 | head -20; then
            echo "‚úÖ Test completed - check output above for results"
        else
            echo "‚ö†Ô∏è  Test completed with timeout - this may be normal"
        fi
    fi
    echo ""
}

# Function to show usage instructions
show_usage() {
    echo "üìñ Usage Instructions"
    echo "===================="
    echo ""
    echo "After setup is complete, you can:"
    echo ""
    echo "1. Connect to VPN:"
    echo "   fortivpn-autoconnect"
    echo ""
    echo "2. Check status (if needed):"
    echo "   fortivpn-setup --status"
    echo ""
    echo "3. Reconfigure settings:"
    echo "   fortivpn-setup --configure"
    echo ""
    echo "4. Install missing dependencies:"
    echo "   fortivpn-setup --install-deps"
    echo ""
    echo "The auto-connect script will:"
    echo "‚úì Automatically detect 2FA prompts"
    echo "‚úì Extract OTP codes from Messages app"
    echo "‚úì Handle authentication with Touch ID"
    echo "‚úì Establish VPN tunnel"
    echo ""
    echo "Important: Make sure to:"
    echo "‚Ä¢ Grant Full Disk Access to Terminal in System Preferences"
    echo "‚Ä¢ Enable Touch ID for sudo authentication"
    echo "‚Ä¢ Have Messages app configured to receive OTP codes"
    echo ""
}

# Main menu
show_menu() {
    echo "What would you like to do?"
    echo ""
    echo "1) Show current status"
    echo "2) Configure VPN settings"
    echo "3) Install dependencies"
    echo "4) Test connection"
    echo "5) Show usage instructions"
    echo "6) Complete setup (all steps)"
    echo "0) Exit"
    echo ""
}

# Parse command line arguments
case "${1:-}" in
    --status)
        show_status
        exit 0
        ;;
    --configure)
        configure_vpn
        exit 0
        ;;
    --install-deps)
        install_dependencies
        exit 0
        ;;
    --help)
        show_usage
        exit 0
        ;;
esac

# Interactive mode
if [[ "${1:-}" == "--complete" ]]; then
    # Automated complete setup
    echo "üöÄ Running complete setup..."
    echo ""
    install_dependencies
    configure_vpn
    show_status
    show_usage
else
    # Interactive menu
    while true; do
        show_menu
        read -p "Enter your choice [0-6]: " choice
        echo ""
        
        case $choice in
            1)
                show_status
                ;;
            2)
                configure_vpn
                ;;
            3)
                install_dependencies
                ;;
            4)
                test_connection
                ;;
            5)
                show_usage
                ;;
            6)
                echo "üöÄ Running complete setup..."
                echo ""
                install_dependencies
                configure_vpn
                show_status
                show_usage
                break
                ;;
            0)
                echo "üëã Setup wizard exiting"
                break
                ;;
            *)
                echo "‚ùå Invalid choice. Please enter 0-6."
                echo ""
                ;;
        esac
        
        if [[ $choice != 0 ]]; then
            read -p "Press Enter to continue..."
            echo ""
        fi
    done
fi
