#!/bin/bash

# FortiVPN Setup Wizard
# Interactive setup for FortiVPN Auto-Connect

set -e

CONFIG_DIR="$HOME/.fortivpn"
CONFIG_FILE="$CONFIG_DIR/forticonfig"

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
NC='\033[0m' # No Color

# Function to check system requirements
check_system_requirements() {
    echo -e "${CYAN}üîç Checking System Requirements${NC}"
    echo "==============================="
    echo ""
    
    local all_good=true
    
    # Check Homebrew
    if command -v brew >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Homebrew is installed${NC}"
    else
        echo -e "${RED}‚ùå Homebrew is not installed${NC}"
        echo "   Please install from: https://brew.sh"
        all_good=false
    fi
    
    # Check openfortivpn
    if command -v openfortivpn >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ openfortivpn is installed${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  openfortivpn is not installed (will install automatically)${NC}"
    fi
    
    # Check expect
    if command -v expect >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ expect is installed${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  expect is not installed (will install automatically)${NC}"
    fi
    
    # Check Terminal Full Disk Access
    echo "üîê Checking system permissions..."
    local messages_db="$HOME/Library/Messages/chat.db"
    if [[ -f "$messages_db" ]] && sqlite3 "$messages_db" "SELECT COUNT(*) FROM message LIMIT 1;" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Terminal has Full Disk Access (can read Messages database)${NC}"
        
        # Additional check for recent messages
        local recent_count=$(sqlite3 "$messages_db" "SELECT COUNT(*) FROM message WHERE date > strftime('%s', 'now', '-24 hours') * 1000000000;" 2>/dev/null || echo "0")
        if [[ "$recent_count" -gt 0 ]]; then
            echo -e "${GREEN}‚úÖ Found $recent_count recent messages (OTP detection should work)${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  No recent messages found - make sure you receive SMS OTP codes${NC}"
        fi
    else
        echo -e "${RED}‚ùå Terminal needs Full Disk Access to read Messages database${NC}"
        echo "   Steps to fix:"
        echo "   1. Open System Preferences/Settings > Privacy & Security > Full Disk Access"
        echo "   2. Click the '+' button and add Terminal.app"
        echo "   3. Restart Terminal after enabling"
        echo "   4. Test by running: sqlite3 ~/Library/Messages/chat.db '.tables'"
        all_good=false
    fi
    
    # Check Touch ID for sudo
    echo "üîë Checking Touch ID for sudo..."
    local pam_tid_configured=false
    local sudo_config="/etc/pam.d/sudo"
    
    if [[ -f "$sudo_config" ]] && grep -q "pam_tid.so" "$sudo_config" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Touch ID is configured for sudo${NC}"
        pam_tid_configured=true
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Touch ID not configured for sudo${NC}"
        echo "   To enable Touch ID for sudo:"
        echo "   1. Run: sudo vim /etc/pam.d/sudo"
        echo "   2. Add this line at the top: auth sufficient pam_tid.so"
        echo "   3. Save and exit"
        echo "   Alternative: Continue with password authentication"
    fi
    
    # Test if current sudo session works
    if sudo -n true 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Current sudo session is active${NC}"
    elif [[ "$pam_tid_configured" == true ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Touch ID configured but sudo session not active${NC}"
        echo "   This is normal - Touch ID will prompt when needed"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No active sudo session (password will be required)${NC}"
    fi
    
    # Check Messages app and configuration
    echo "üì± Checking Messages app..."
    if [[ -d "/Applications/Messages.app" ]]; then
        echo -e "${GREEN}‚úÖ Messages app is available${NC}"
        
        # Check if Messages is running
        if pgrep -f "Messages" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Messages app is currently running${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Messages app is not running${NC}"
            echo "   Consider starting Messages.app to ensure SMS delivery"
        fi
        
        # Check for recent SMS messages (potential OTP sources)
        local messages_db="$HOME/Library/Messages/chat.db"
        if [[ -f "$messages_db" ]]; then
            local sms_count=$(sqlite3 "$messages_db" "SELECT COUNT(*) FROM handle WHERE service = 'SMS';" 2>/dev/null || echo "0")
            if [[ "$sms_count" -gt 0 ]]; then
                echo -e "${GREEN}‚úÖ Found $sms_count SMS contacts (good for OTP delivery)${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  No SMS contacts found - make sure SMS forwarding is configured${NC}"
            fi
        fi
        
        echo "   Important: Ensure Messages is configured to receive OTP SMS codes"
        echo "   If using iPhone: Enable Text Message Forwarding in Settings > Messages"
    else
        echo -e "${RED}‚ùå Messages app not found${NC}"
        echo "   Messages app is required for automatic OTP code extraction"
        all_good=false
    fi
    
    echo ""
    
    if [[ "$all_good" != true ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Some requirements are missing. Please fix the issues above before continuing.${NC}"
        echo ""
        read -p "Continue anyway? (y/N): " continue_anyway
        if [[ ! "$continue_anyway" =~ ^[Yy] ]]; then
            echo -e "${RED}‚ùå Setup cancelled. Please fix the requirements and try again.${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}‚úÖ All system requirements are met!${NC}"
    fi
    echo ""
}

echo -e "${CYAN}üîß FortiVPN Auto-Connect Setup Wizard${NC}"
echo "======================================"
echo ""

# Create config directory if it doesn't exist
if [[ ! -d "$CONFIG_DIR" ]]; then
    echo "üìÅ Creating configuration directory: $CONFIG_DIR"
    mkdir -p "$CONFIG_DIR"
fi

# Run system requirements check on startup unless --skip-check is passed
if [[ "${1:-}" != "--skip-check" ]] && [[ "${1:-}" != "--status" ]] && [[ "${1:-}" != "--help" ]]; then
    check_system_requirements
fi

# Function to show current status
show_status() {
    echo "üìä Current Setup Status:"
    echo "========================"
    
    # Check config file
    if [[ -f "$CONFIG_FILE" ]]; then
        echo "‚úÖ Configuration file exists: $CONFIG_FILE"
        echo "   Current settings:"
        cat "$CONFIG_FILE" | sed 's/^/   /'
    else
        echo "‚ùå Configuration file missing: $CONFIG_FILE"
    fi
    
    # Check openfortivpn
    if command -v openfortivpn >/dev/null 2>&1; then
        echo "‚úÖ openfortivpn is installed"
    else
        echo "‚ùå openfortivpn is not installed"
        echo "   Install with: brew install openfortivpn"
    fi
    
    # Check expect
    if command -v expect >/dev/null 2>&1; then
        echo "‚úÖ expect is installed"
    else
        echo "‚ùå expect is not installed"
        echo "   Install with: brew install expect"
    fi
    
    # Check sudo Touch ID
    if sudo -n true 2>/dev/null; then
        echo "‚úÖ sudo authentication cached"
    else
        echo "‚ö†Ô∏è  sudo Touch ID not configured or authentication needed"
        echo "   Configure Touch ID for sudo in System Preferences"
    fi
    
    # Check Messages permissions
    if [[ -d "/System/Library/Messages" ]] || [[ -d "/Applications/Messages.app" ]]; then
        echo "‚úÖ Messages app available"
        echo "‚ö†Ô∏è  Grant Full Disk Access to Terminal in System Preferences"
    fi
    
    echo ""
}

# Function to configure VPN settings
configure_vpn() {
    echo "üîß VPN Configuration Setup"
    echo "=========================="
    echo ""
    
    echo "Please enter your VPN connection details:"
    echo ""
    
    # Validate server hostname/IP
    while true; do
        read -p "VPN Server (hostname or IP): " vpn_host
        if [[ -n "$vpn_host" ]]; then
            # Basic validation - check if it looks like a valid hostname or IP
            if [[ "$vpn_host" =~ ^[a-zA-Z0-9.-]+$ ]]; then
                break
            else
                echo "‚ùå Invalid server format. Please enter a valid hostname or IP address."
            fi
        else
            echo "‚ùå Server address cannot be empty."
        fi
    done
    
    # Port with smart defaults
    echo ""
    echo "Common FortiGate ports:"
    echo "‚Ä¢ 443 (HTTPS, most common)"
    echo "‚Ä¢ 4443 (Alternative HTTPS)"
    echo "‚Ä¢ 10443 (Alternative)"
    echo ""
    
    while true; do
        read -p "Port (default: 443): " vpn_port
        vpn_port=${vpn_port:-443}
        
        # Validate port number
        if [[ "$vpn_port" =~ ^[0-9]+$ ]] && [ "$vpn_port" -ge 1 ] && [ "$vpn_port" -le 65535 ]; then
            break
        else
            echo "‚ùå Invalid port. Please enter a number between 1 and 65535."
        fi
    done
    
    # Username validation
    while true; do
        read -p "Username: " vpn_username
        if [[ -n "$vpn_username" ]]; then
            break
        else
            echo "‚ùå Username cannot be empty."
        fi
    done
    
    # Password (with confirmation option)
    while true; do
        read -s -p "Password: " vpn_password
        echo ""
        if [[ -n "$vpn_password" ]]; then
            read -s -p "Confirm password: " vpn_password_confirm
            echo ""
            if [[ "$vpn_password" == "$vpn_password_confirm" ]]; then
                break
            else
                echo "‚ùå Passwords don't match. Please try again."
            fi
        else
            echo "‚ùå Password cannot be empty."
        fi
    done
    
    echo ""
    echo "üìù Creating initial configuration file..."
    
    # Create initial config without trusted certificate
    cat > "$CONFIG_FILE" << EOF
host = $vpn_host
port = $vpn_port
username = $vpn_username
password = $vpn_password
EOF
    
    # Set secure permissions
    chmod 600 "$CONFIG_FILE"
    
    echo "‚úÖ Initial configuration saved to: $CONFIG_FILE"
    echo "üîí File permissions set to 600 (owner read/write only)"
    echo ""
    
    # Now attempt to auto-detect trusted certificate
    echo "üîç Auto-detecting trusted certificate..."
    echo "This will make a test connection to retrieve the server certificate."
    echo ""
    
    detect_trusted_certificate
}

# Function to detect trusted certificate automatically
detect_trusted_certificate() {
    echo "üîê Attempting to auto-detect trusted certificate..."
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "‚ùå Configuration file not found. Please configure VPN settings first."
        return 1
    fi
    
    # Read config to show connection attempt details
    local vpn_host=$(grep "^host = " "$CONFIG_FILE" | cut -d' ' -f3)
    local vpn_port=$(grep "^port = " "$CONFIG_FILE" | cut -d' ' -f3)
    
    echo "üîÑ Testing connection to: $vpn_host:$vpn_port"
    echo "‚ö†Ô∏è  This will attempt to connect and capture the certificate information."
    echo "   The connection will likely fail with authentication - this is expected!"
    echo ""
    
    # Create a temporary output file
    local temp_output="/tmp/fortivpn_cert_detect_$$.log"
    local temp_config="/tmp/fortivpn_config_test_$$.conf"
    
    # Create a temporary config without password for certificate detection
    grep -v "^password = " "$CONFIG_FILE" > "$temp_config"
    echo "password = dummy" >> "$temp_config"
    
    echo "üîÑ Starting certificate detection (timeout: 20 seconds)..."
    echo ""
    
    # Try multiple approaches to get certificate information
    local cert_hash=""
    
    # Method 1: Direct openfortivpn with verbose output
    echo "Method 1: Running openfortivpn with verbose logging..."
    timeout 20 openfortivpn --config="$temp_config" -v 2>&1 | tee "$temp_output" | head -15 || true
    echo ""
    
    # Look for certificate hash patterns
    if grep -q "trusted-cert" "$temp_output"; then
        cert_hash=$(grep "trusted-cert" "$temp_output" | sed -n 's/.*trusted-cert[[:space:]]*=[[:space:]]*\([a-fA-F0-9:]*\).*/\1/p' | head -1)
        echo "‚úÖ Found certificate via trusted-cert output: $cert_hash"
    fi
    
    # Method 2: Look for certificate fingerprint patterns
    if [[ -z "$cert_hash" ]]; then
        echo "Method 2: Searching for certificate fingerprint patterns..."
        cert_hash=$(grep -oE "([a-fA-F0-9]{2}[:]){19}[a-fA-F0-9]{2}" "$temp_output" | head -1)
        if [[ -n "$cert_hash" ]]; then
            echo "‚úÖ Found certificate fingerprint: $cert_hash"
        fi
    fi
    
    # Method 3: Alternative pattern matching
    if [[ -z "$cert_hash" ]]; then
        echo "Method 3: Looking for alternative certificate formats..."
        # Look for SHA256 or SHA1 patterns
        cert_hash=$(grep -i "fingerprint\|certificate\|sha256\|sha1" "$temp_output" | grep -oE "([a-fA-F0-9]{2}[:]){15,31}[a-fA-F0-9]{2}" | head -1)
        if [[ -n "$cert_hash" ]]; then
            echo "‚úÖ Found certificate via alternative pattern: $cert_hash"
        fi
    fi
    
    # Method 4: Try openssl to get server certificate directly
    if [[ -z "$cert_hash" ]]; then
        echo "Method 4: Using OpenSSL to retrieve server certificate..."
        local ssl_output="/tmp/ssl_cert_$$.txt"
        timeout 10 openssl s_client -connect "$vpn_host:$vpn_port" -servername "$vpn_host" 2>/dev/null | openssl x509 -fingerprint -sha256 -noout 2>/dev/null | cut -d= -f2 > "$ssl_output" || true
        
        if [[ -s "$ssl_output" ]]; then
            cert_hash=$(cat "$ssl_output" | tr -d ' ')
            echo "‚úÖ Retrieved certificate via OpenSSL: $cert_hash"
        fi
        rm -f "$ssl_output"
    fi
    
    # Process the certificate if found
    if [[ -n "$cert_hash" ]]; then
        echo ""
        echo "üéâ Successfully detected trusted certificate!"
        echo "   Certificate: $cert_hash"
        echo ""
        echo "üìù Adding certificate to configuration..."
        
        # Check if certificate already exists in config
        if grep -q "trusted-cert = " "$CONFIG_FILE"; then
            echo "‚ö†Ô∏è  Configuration already contains a trusted certificate."
            echo "   Current: $(grep "trusted-cert = " "$CONFIG_FILE" | cut -d' ' -f3)"
            echo "   New:     $cert_hash"
            echo ""
            read -p "Replace existing certificate? (y/N): " replace_cert
            if [[ "$replace_cert" =~ ^[Yy] ]]; then
                # Replace existing certificate
                sed -i '' "s/trusted-cert = .*/trusted-cert = $cert_hash/" "$CONFIG_FILE"
                echo "‚úÖ Certificate replaced in configuration"
            else
                echo "‚ö†Ô∏è  Keeping existing certificate"
            fi
        else
            # Add new certificate to config file
            echo "trusted-cert = $cert_hash" >> "$CONFIG_FILE"
            echo "‚úÖ Certificate added to configuration"
        fi
        
        echo ""
        echo "üìÑ Updated configuration:"
        cat "$CONFIG_FILE" | sed 's/^password = .*/password = [HIDDEN]/' | sed 's/^/   /'
        echo ""
        echo "üéØ Certificate auto-detection completed successfully!"
        
    else
        echo ""
        echo "‚ö†Ô∏è  Could not auto-detect certificate from any method."
        echo ""
        echo "üìã Debug information:"
        echo "   Connection log (last 20 lines):"
        tail -20 "$temp_output" | sed 's/^/   /' 2>/dev/null || echo "   (No log output available)"
        echo ""
        echo "üîß Possible solutions:"
        echo "   1. Verify server address and port are correct"
        echo "   2. Check if server is reachable: ping $vpn_host"
        echo "   3. Test port connectivity: nc -zv $vpn_host $vpn_port"
        echo "   4. Try connecting manually once to accept certificate:"
        echo "      openfortivpn --config=\"$CONFIG_FILE\""
        echo "   5. Add trusted-cert manually after first successful connection"
        echo ""
        
        read -p "Continue setup anyway? (y/N): " continue_anyway
        if [[ ! "$continue_anyway" =~ ^[Yy] ]]; then
            echo "‚ùå Setup paused. You can:"
            echo "   ‚Ä¢ Fix connectivity issues and try again"
            echo "   ‚Ä¢ Run 'fortivpn-setup --configure' to reconfigure"
            echo "   ‚Ä¢ Run a manual connection to get the certificate"
            rm -f "$temp_output" "$temp_config"
            return 1
        else
            echo "‚ö†Ô∏è  Continuing without certificate. You may need to add it manually later."
        fi
    fi
    
    # Clean up temporary files
    rm -f "$temp_output" "$temp_config"
    echo ""
}

# Function to install dependencies
install_dependencies() {
    echo "üì¶ Installing Dependencies"
    echo "========================="
    echo ""
    
    if ! command -v brew >/dev/null 2>&1; then
        echo "‚ùå Homebrew is not installed"
        echo ""
        echo "üç∫ Installing Homebrew..."
        echo "This will install Homebrew (the package manager for macOS)"
        echo ""
        read -p "Install Homebrew now? (y/N): " install_brew
        
        if [[ "$install_brew" =~ ^[Yy] ]]; then
            echo "üîÑ Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            
            # Add Homebrew to PATH for current session
            if [[ -f "/opt/homebrew/bin/brew" ]]; then
                echo "‚úÖ Homebrew installed (Apple Silicon Mac detected)"
                export PATH="/opt/homebrew/bin:$PATH"
            elif [[ -f "/usr/local/bin/brew" ]]; then
                echo "‚úÖ Homebrew installed (Intel Mac detected)"
                export PATH="/usr/local/bin:$PATH"
            else
                echo "‚ùå Homebrew installation may have failed"
                echo "   Please install manually from: https://brew.sh"
                return 1
            fi
        else
            echo "‚ùå Homebrew is required. Please install from: https://brew.sh"
            return 1
        fi
    else
        echo "‚úÖ Homebrew is already installed"
    fi
    
    echo ""
    echo "üì¶ Installing required packages..."
    
    local packages_needed=()
    
    # Check openfortivpn
    if ! command -v openfortivpn >/dev/null 2>&1; then
        packages_needed+=("openfortivpn")
        echo "‚ö†Ô∏è  openfortivpn not found - will install"
    else
        echo "‚úÖ openfortivpn already installed"
    fi
    
    # Check expect
    if ! command -v expect >/dev/null 2>&1; then
        packages_needed+=("expect")
        echo "‚ö†Ô∏è  expect not found - will install"
    else
        echo "‚úÖ expect already installed"
    fi
    
    # Install missing packages
    if [[ ${#packages_needed[@]} -gt 0 ]]; then
        echo ""
        echo "üîÑ Installing: ${packages_needed[*]}"
        if brew install "${packages_needed[@]}"; then
            echo "‚úÖ All dependencies installed successfully"
            
            # Verify installations
            echo ""
            echo "üîç Verifying installations..."
            for package in "${packages_needed[@]}"; do
                if command -v "$package" >/dev/null 2>&1; then
                    local version=$($package --version 2>/dev/null | head -1 || echo "unknown")
                    echo "‚úÖ $package installed: $version"
                else
                    echo "‚ùå $package installation may have failed"
                fi
            done
        else
            echo "‚ùå Failed to install some dependencies"
            echo "   Try running: brew update && brew install ${packages_needed[*]}"
            return 1
        fi
    else
        echo "‚úÖ All required dependencies are already installed"
    fi
    
    echo ""
    echo "üîß Checking additional tools..."
    
    # Check sqlite3 (usually pre-installed on macOS)
    if command -v sqlite3 >/dev/null 2>&1; then
        echo "‚úÖ sqlite3 available (needed for Messages database access)"
    else
        echo "‚ö†Ô∏è  sqlite3 not found - may need to install Xcode Command Line Tools"
        echo "   Run: xcode-select --install"
    fi
    
    # Check openssl (usually available)
    if command -v openssl >/dev/null 2>&1; then
        local ssl_version=$(openssl version 2>/dev/null)
        echo "‚úÖ openssl available: $ssl_version"
    else
        echo "‚ö†Ô∏è  openssl not found - installing via Homebrew"
        brew install openssl || echo "‚ùå Failed to install openssl"
    fi
    
    echo ""
    echo "‚úÖ Dependency installation completed!"
    echo ""
}

# Function to test connection
test_connection() {
    echo "üß™ Testing VPN Connection"
    echo "========================="
    echo ""
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "‚ùå Configuration file not found. Please configure VPN settings first."
        return 1
    fi
    
    echo "This will test your VPN connection settings..."
    echo "‚ö†Ô∏è  You may need to enter a 2FA code manually for this test"
    echo ""
    read -p "Continue with test? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[Yy] ]]; then
        echo "üîÑ Starting test connection..."
        if timeout 30 openfortivpn --config="$CONFIG_FILE" --no-routes 2>&1 | head -20; then
            echo "‚úÖ Test completed - check output above for results"
        else
            echo "‚ö†Ô∏è  Test completed with timeout - this may be normal"
        fi
    fi
    echo ""
}

# Function to show usage instructions
show_usage() {
    echo -e "${BLUE}üìñ Usage Instructions${NC}"
    echo "===================="
    echo ""
    echo -e "${CYAN}Command line options:${NC}"
    echo "  fortivpn-setup                    # Interactive setup wizard"
    echo "  fortivpn-setup --status           # Show current status"
    echo "  fortivpn-setup --configure        # Configure VPN settings only"
    echo "  fortivpn-setup --install-deps     # Install dependencies only"
    echo "  fortivpn-setup --complete         # Run complete automated setup"
    echo "  fortivpn-setup --skip-check       # Skip system requirements check"
    echo "  fortivpn-setup --help             # Show this help"
    echo ""
    echo -e "${CYAN}After setup is complete, you can:${NC}"
    echo ""
    echo "1. Connect to VPN:"
    echo -e "${GREEN}   forti${NC}                          # Short command"
    echo -e "${GREEN}   fortivpn-autoconnect${NC}          # Full command"
    echo ""
    echo "2. Check status (if needed):"
    echo "   fortivpn-setup --status"
    echo ""
    echo "3. Reconfigure settings:"
    echo "   fortivpn-setup --configure"
    echo ""
    echo "4. Install missing dependencies:"
    echo "   fortivpn-setup --install-deps"
    echo ""
    echo -e "${CYAN}The auto-connect script will:${NC}"
    echo -e "${GREEN}‚úì${NC} Automatically detect 2FA prompts"
    echo -e "${GREEN}‚úì${NC} Extract OTP codes from Messages app"
    echo -e "${GREEN}‚úì${NC} Handle authentication with Touch ID"
    echo -e "${GREEN}‚úì${NC} Establish VPN tunnel"
    echo -e "${GREEN}‚úì${NC} Show colored output for better visibility"
    echo ""
    echo -e "${YELLOW}Important: Make sure to:${NC}"
    echo "‚Ä¢ Grant Full Disk Access to Terminal in System Preferences"
    echo "‚Ä¢ Enable Touch ID for sudo authentication (optional)"
    echo "‚Ä¢ Have Messages app configured to receive OTP codes"
    echo "‚Ä¢ Configure SMS forwarding from iPhone if using iPhone"
    echo ""
}

# Main menu
show_menu() {
    echo -e "${CYAN}What would you like to do?${NC}"
    echo ""
    echo -e "${WHITE}1)${NC} Show current status"
    echo -e "${WHITE}2)${NC} Configure VPN settings"
    echo -e "${WHITE}3)${NC} Install dependencies"
    echo -e "${WHITE}4)${NC} Test connection"
    echo -e "${WHITE}5)${NC} Show usage instructions"
    echo -e "${WHITE}6)${NC} Complete setup (all steps)"
    echo -e "${WHITE}0)${NC} Exit"
    echo ""
}

# Parse command line arguments
case "${1:-}" in
    --status)
        show_status
        exit 0
        ;;
    --configure)
        configure_vpn
        exit 0
        ;;
    --install-deps)
        install_dependencies
        exit 0
        ;;
    --skip-check)
        echo -e "${YELLOW}‚ö†Ô∏è  Skipping system requirements check${NC}"
        echo ""
        ;;
    --help)
        show_usage
        exit 0
        ;;
esac

# Interactive mode
if [[ "${1:-}" == "--complete" ]]; then
    # Automated complete setup
    echo -e "${CYAN}üöÄ Running complete setup...${NC}"
    echo ""
    install_dependencies
    configure_vpn
    show_status
    show_usage
else
    # Interactive menu
    while true; do
        show_menu
        read -p "Enter your choice [0-6]: " choice
        echo ""
        
        case $choice in
            1)
                show_status
                ;;
            2)
                configure_vpn
                ;;
            3)
                install_dependencies
                ;;
            4)
                test_connection
                ;;
            5)
                show_usage
                ;;
            6)
                echo -e "${CYAN}üöÄ Running complete setup...${NC}"
                echo ""
                install_dependencies
                configure_vpn
                show_status
                show_usage
                break
                ;;
            0)
                echo -e "${GREEN}üëã Setup wizard exiting${NC}"
                break
                ;;
            *)
                echo -e "${RED}‚ùå Invalid choice. Please enter 0-6.${NC}"
                echo ""
                ;;
        esac
        
        if [[ $choice != 0 ]]; then
            echo ""
            read -p "Press Enter to continue..."
            echo ""
        fi
    done
fi
