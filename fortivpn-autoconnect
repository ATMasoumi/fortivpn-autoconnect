#!/bin/bash

# FortiVPN Auto-Connect with 2FA
# Automatically connects to FortiVPN and handles 2FA OTP codes

set -e

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Determine script directory and config paths
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Check if we're running from Homebrew installation
if [[ "$SCRIPT_DIR" =~ /usr/local/bin ]] || [[ "$SCRIPT_DIR" =~ /opt/homebrew/bin ]]; then
    # Homebrew installation - look for config in user's home directory
    CONFIG_DIR="$HOME/.fortivpn"
    CONFIG_FILE="$CONFIG_DIR/forticonfig"
    OTP_SCRIPT="$SCRIPT_DIR/get_otp_code.scpt"
else
    # Development or manual installation - use script directory
    CONFIG_FILE="$SCRIPT_DIR/forticonfig"
    OTP_SCRIPT="$SCRIPT_DIR/get_otp_code.scpt"
fi

# Function to check and optionally configure Touch ID for sudo_local
check_touchid_config() {
    local sudo_local_config="/etc/pam.d/sudo_local"
    
    # Check if Touch ID is already properly configured (uncommented)
    if [[ -f "$sudo_local_config" ]] && grep -q "^auth.*sufficient.*pam_tid.so" "$sudo_local_config" 2>/dev/null; then
        return 0  # Touch ID is properly configured
    fi
    
    # Only offer configuration in interactive mode
    if ! is_interactive; then
        echo -e "${YELLOW}⚠️  Touch ID not configured and running non-interactively${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}⚠️  Touch ID not configured for sudo_local${NC}"
    echo ""
    echo "For faster authentication, you can configure Touch ID for sudo_local."
    echo ""
    read -p "Configure Touch ID now? (y/n): " configure_touchid
    
    if [[ "$configure_touchid" == "y" || "$configure_touchid" == "Y" ]]; then
        echo ""
        echo -e "${CYAN}🔧 Configuring Touch ID for sudo_local...${NC}"
        
        # Check if sudo_local file exists, create if it doesn't
        if [[ ! -f "$sudo_local_config" ]]; then
            echo "📝 Creating /etc/pam.d/sudo_local file..."
            if sudo tee "$sudo_local_config" > /dev/null << 'EOF'
# sudo_local: local config file which survives system update and is included for sudo
# uncomment following line to enable Touch ID for sudo
auth       sufficient     pam_tid.so
auth       include        sudo
account    include        sudo
password   include        sudo
session    include        sudo
EOF
            then
                echo -e "${GREEN}✅ Touch ID successfully configured for sudo_local${NC}"
                return 0
            else
                echo -e "${RED}❌ Failed to create sudo_local configuration${NC}"
                return 1
            fi
        else
            # File exists, check if pam_tid.so line needs to be added/uncommented
            if grep -q "^#.*auth.*sufficient.*pam_tid.so" "$sudo_local_config" 2>/dev/null; then
                echo "📝 Uncommenting existing Touch ID configuration..."
                if sudo sed -i '' 's/^#.*auth.*sufficient.*pam_tid.so/auth       sufficient     pam_tid.so/' "$sudo_local_config"; then
                    echo -e "${GREEN}✅ Touch ID successfully enabled in sudo_local${NC}"
                    return 0
                else
                    echo -e "${RED}❌ Failed to uncomment Touch ID configuration${NC}"
                    return 1
                fi
            elif ! grep -q "pam_tid.so" "$sudo_local_config" 2>/dev/null; then
                echo "📝 Adding Touch ID configuration to existing sudo_local..."
                # Create a temporary file with the pam_tid.so line at the top
                local temp_file="/tmp/sudo_local_temp_$$"
                echo "auth       sufficient     pam_tid.so" > "$temp_file"
                cat "$sudo_local_config" >> "$temp_file"
                
                if sudo cp "$temp_file" "$sudo_local_config"; then
                    echo -e "${GREEN}✅ Touch ID successfully added to sudo_local${NC}"
                    rm -f "$temp_file"
                    return 0
                else
                    echo -e "${RED}❌ Failed to update sudo_local configuration${NC}"
                    rm -f "$temp_file"
                    return 1
                fi
            else
                echo -e "${GREEN}✅ Touch ID already configured in sudo_local${NC}"
                return 0
            fi
        fi
    else
        echo "   Continuing with password authentication..."
        return 1
    fi
}

echo "🚀 FortiVPN Auto-Connect with 2FA"
echo "======================================="

# Check if already connected
if pgrep -f "openfortivpn" > /dev/null; then
    echo -e "${GREEN}✅ FortiVPN is already running${NC}"
    echo ""
    echo "Current connection status:"
    ps aux | grep openfortivpn | grep -v grep || echo "No active connections found"
    echo ""
    echo "Use 'sudo pkill openfortivpn' to disconnect"
    exit 0
fi

# Check config file exists
if [[ ! -f "$CONFIG_FILE" ]]; then
    echo -e "${RED}❌ Config file not found: $CONFIG_FILE${NC}"
    echo ""
    echo "🔧 Starting automatic VPN configuration setup..."
    echo ""
    
    if [[ "$SCRIPT_DIR" =~ /usr/local/bin ]] || [[ "$SCRIPT_DIR" =~ /opt/homebrew/bin ]]; then
        # Homebrew installation - run setup from the same directory
        if [[ -f "$SCRIPT_DIR/fortivpn-setup" ]]; then
            exec "$SCRIPT_DIR/fortivpn-setup"
        else
            echo -e "${RED}❌ Setup script not found: $SCRIPT_DIR/fortivpn-setup${NC}"
            echo "Please run 'fortivpn-setup' manually to configure your VPN settings"
            exit 1
        fi
    else
        # Development or manual installation - run setup from script directory
        if [[ -f "$SCRIPT_DIR/fortivpn-setup" ]]; then
            exec "$SCRIPT_DIR/fortivpn-setup"
        else
            echo -e "${RED}❌ Setup script not found: $SCRIPT_DIR/fortivpn-setup${NC}"
            echo "Please create the config file with your VPN credentials"
            exit 1
        fi
    fi
fi

# Check OTP script exists
if [[ ! -f "$OTP_SCRIPT" ]]; then
    echo -e "${RED}❌ OTP script not found: $OTP_SCRIPT${NC}"
    echo "Please ensure get_otp_code.scpt exists"
    exit 1
fi

echo "📝 Configuration file: $CONFIG_FILE"
echo "📱 OTP extraction script: $OTP_SCRIPT"
echo ""
echo "🔄 Initializing VPN connection..."

# Function to check if Touch ID is actually available and working
check_touchid_available() {
    # Check if running in interactive terminal
    if [[ ! -t 0 ]] || [[ ! -t 1 ]]; then
        return 1  # Not interactive
    fi
    
    # Check if Touch ID is configured in PAM
    if ! grep -q "^auth.*sufficient.*pam_tid.so" /etc/pam.d/sudo_local 2>/dev/null; then
        return 1  # Not configured
    fi
    
    # Check if Touch ID hardware is available (basic check)
    if ! bioutil -s 2>/dev/null | grep -q "Touch ID" 2>/dev/null; then
        return 1  # Hardware not available
    fi
    
    return 0  # Touch ID should be available
}

# Function to detect if running in automated/non-interactive environment
is_interactive() {
    # Check if stdin/stdout are terminals
    [[ -t 0 ]] && [[ -t 1 ]] && [[ -t 2 ]]
}

# Pre-authenticate sudo with better handling for Touch ID vs password
echo "🔐 Requesting sudo authentication..."

# Check if we already have valid sudo credentials
if sudo -n true 2>/dev/null; then
    echo -e "${GREEN}✅ Using cached sudo credentials${NC}"
else
    # Determine authentication method
    if check_touchid_available; then
        echo "🔍 Touch ID detected - attempting authentication..."
        
        # Try Touch ID authentication with timeout and fallback
        if gtimeout 30 sudo -v 2>/dev/null; then
            echo -e "${GREEN}✅ Touch ID authentication successful${NC}"
        else
            echo -e "${YELLOW}⚠️  Touch ID authentication timed out or failed${NC}"
            echo "🔐 Falling back to password authentication..."
            
            # Fallback to password authentication
            if sudo -v; then
                echo -e "${GREEN}✅ Password authentication successful${NC}"
            else
                echo -e "${RED}❌ Authentication failed${NC}"
                exit 1
            fi
        fi
    else
        # Touch ID not available, check if user wants to configure it
        if grep -q "^auth.*sufficient.*pam_tid.so" /etc/pam.d/sudo_local 2>/dev/null; then
            echo "🔐 Touch ID configured but not available - using password authentication..."
        elif grep -q "pam_tid.so" /etc/pam.d/sudo_local 2>/dev/null; then
            echo "🔐 Using password authentication (Touch ID disabled)"
            echo "   💡 Tip: Run 'fortivpn-setup' to enable Touch ID for faster authentication"
        else
            echo "🔐 Using password authentication..."
            # Ask if user wants to configure Touch ID now
            check_touchid_config
        fi
        
        # For password mode, try to pre-authenticate to avoid issues in expect script
        echo "🔑 Pre-authenticating sudo access..."
        if sudo -v; then
            echo -e "${GREEN}✅ Password authentication successful${NC}"
        else
            echo -e "${RED}❌ Authentication failed${NC}"
            exit 1
        fi
    fi
fi

# Keep sudo credentials fresh by refreshing them in background
# This prevents the second Touch ID prompt - refresh every 30 seconds
# Use non-interactive refresh to avoid prompting in background
(while true; do 
    sleep 30
    # Try non-interactive refresh first, fall back to interactive if needed
    if ! sudo -n -v 2>/dev/null; then
        # If non-interactive fails, credentials have expired
        # The main expect script will handle the prompt
        break
    fi
done) &
SUDO_REFRESH_PID=$!

# Setup cleanup function for when script exits or is interrupted
cleanup() {
    echo ""
    echo "🧹 Cleaning up..."
    
    # Kill sudo refresh process
    if [[ -n "$SUDO_REFRESH_PID" ]]; then
        kill $SUDO_REFRESH_PID 2>/dev/null
        echo "🔐 Stopped background authentication"
    fi
    
    # Kill any running openfortivpn processes
    if pgrep -f "openfortivpn" > /dev/null; then
        echo "⚠️  Disconnecting VPN..."
        sudo pkill openfortivpn 2>/dev/null
        sleep 1
        echo -e "${GREEN}✅ VPN disconnected${NC}"
    fi
    
    # Remove temporary files
    rm -f /tmp/forti_expect.exp
    
    echo "🏁 Cleanup complete"
}

# Trap signals to ensure cleanup happens on exit/interruption
trap cleanup EXIT
trap cleanup INT
trap cleanup TERM

# Create expect script for automation
cat > /tmp/forti_expect.exp << 'EXPECT_EOF'
#!/usr/bin/expect -f

set timeout 120
set config_file [lindex $argv 0]
set otp_script [lindex $argv 1]

# Color definitions for expect script (minimal)
set RED "\033\[0;31m"
set GREEN "\033\[0;32m"
set YELLOW "\033\[1;33m"
set NC "\033\[0m"

# Enable logging for debugging
log_user 1
exp_internal 0

puts "${GREEN}-> Connecting to FortiVPN server...${NC}"

# Start openfortivpn (sudo should already be authenticated)
spawn sudo openfortivpn --config=$config_file

# Initialize flags
set otp_submitted 0
set connection_started 0

# Handle the various prompts that may appear
while {1} {
    expect {
        -re "Password.*:" {
            # Check if this is a sudo password prompt or VPN password prompt
            # If we see "Password:" right after spawn, it's likely sudo
            if {$connection_started == 0} {
                # This is sudo password prompt - let user enter password
                puts "🔐 Please enter your sudo password:"
                
                # Use stty to hide password input temporarily
                stty -echo
                expect_user -re "(.*)\n"
                set user_password $expect_out(1,string)
                stty echo
                
                # Send the password
                send "$user_password\r"
                puts ""
                exp_continue
            } else {
                # This should be VPN password prompt during connection
                puts "🔐 VPN server requesting password authentication..."
                puts "📝 Using password from config file..."
                # Let openfortivpn handle password from config file
                exp_continue
            }
        }
        -re "(Connected to gateway|tunnel is up)" {
            puts "${GREEN}✅ Connected to VPN gateway!${NC}"
            set connection_started 1
            # Add a small delay to allow server to set up 2FA prompt
            after 1000
            exp_continue
        }
        -re "Established.*connection" {
            puts "${GREEN}✅ Connection established!${NC}"
            exp_continue
        }
        -re "(ERROR|WARN):" {
            # Show important error/warning messages
            puts "$expect_out(0,string)"
            exp_continue
        }
        -re "DEBUG:" {
            # Silently consume debug messages to reduce noise
            exp_continue
        }
        -re "SSL_connect.*error" {
            puts "\n${RED}❌ SSL connection failed${NC}"
            puts "⚠️  Certificate validation error"
            puts "ℹ️  Check certificate settings in config file"
            catch {exec sudo pkill openfortivpn}
            exit 1
        }
        -re "Could not log out" {
            puts "\n${RED}❌ Connection failed during setup${NC}"
            puts "⚠️  VPN connection setup error"
            catch {exec sudo pkill openfortivpn}
            exit 1
        }
        -re "Two-factor authentication token:" {
            # Skip if we've already submitted an OTP
            if {$otp_submitted == 1} {
                puts "🔄 Waiting for 2FA authentication result..."
                exp_continue
            }
            
            puts "\n${YELLOW}🔐 Two-factor authentication required${NC}"
            puts "📱 Monitoring Messages app for OTP codes..."
            puts "📱 Please check your phone for SMS with verification code..."
            puts ""
            
            # Record the current timestamp when 2FA prompt appears
            set prompt_time [clock seconds]
            
            # Continuous monitoring with longer timeout and better feedback
            set otp_code ""
            set max_attempts 240  ; # 240 * 0.5 = 120 seconds total (2 minutes)
            
            for {set i 0} {$i < $max_attempts} {incr i} {
                # Show progress every 10 seconds
                if {[expr $i % 20] == 0} {
                    set elapsed [expr $i/2]
                    puts "⏳ Waiting for SMS with OTP code... (${elapsed} seconds elapsed)"
                    puts "   📱 Checking Messages app for new verification codes..."
                }
                
                catch {
                    # Pass the prompt timestamp to the script so it only looks for newer messages
                    set otp_code [exec osascript $otp_script $prompt_time]
                } catch_result
                
                if {$otp_code != "" && [string length $otp_code] >= 4} {
                    puts "\n${GREEN}✅ OTP code detected: $otp_code${NC}"
                    puts "🔑 Submitting authentication code to VPN server..."
                    
                    # Send the OTP code
                    send "$otp_code\r"
                    set otp_submitted 1
                    
                    puts "🔄 Waiting for authentication result..."
                    break
                } else {
                    if {$i < [expr $max_attempts - 1]} {
                        # Short sleep for responsive monitoring
                        after 500  ; # 0.5 seconds
                    }
                }
            }
            
            if {$otp_code == "" || [string length $otp_code] < 4} {
                puts "\n${RED}❌ No valid OTP code detected after 2 minutes${NC}"
                puts "📱 SMS may not have arrived yet or Messages app access issue"
                puts ""
                puts "Please enter the OTP code manually:"
                interact
                exit 1
            }
            
            # Continue to check connection result
            exp_continue
        }
        "Authenticated" {
            puts "\n${GREEN}🎉 Authentication successful!${NC}"
            exp_continue
        }
        "Negotiation complete" {
            puts "\n${GREEN}📋 VPN negotiation complete${NC}"
            exp_continue
        }
        "tunnel is up and running" {
            puts "\n${GREEN}🎉 VPN Connected Successfully!${NC}"
            puts "${GREEN}🔒 Secure tunnel established${NC}"
            puts ""
            puts "ℹ️  Your connection is now active. Press Ctrl+C to disconnect."
            interact
        }
        "Invalid token" {
            puts "\n${RED}❌ Invalid OTP token - may be expired${NC}"
            puts "⚠️  The OTP code may have expired or been used already"
            catch {exec sudo pkill openfortivpn}
            exit 1
        }
        "Login failed" {
            puts "\n${RED}❌ Login failed${NC}"
            puts "⚠️  Possible causes:"
            puts "   • Incorrect username or password in config file"
            puts "   • Account locked or disabled"
            catch {exec sudo pkill openfortivpn}
            exit 1
        }
        "Could not authenticate to gateway" {
            puts "\n${RED}❌ Authentication failed${NC}"
            puts "⚠️  Could not authenticate with VPN gateway"
            puts "ℹ️  Possible causes:"
            puts "   • Server-side 2FA system may be temporarily unavailable"
            puts "   • Account may need to be reset by administrator"
            puts "   • VPN server configuration may have changed"
            puts "   • Try again in a few minutes or contact IT support"
            catch {exec sudo pkill openfortivpn}
            exit 1
        }
        -re "authentication failed|Authentication.*failed" {
            puts "\n${RED}❌ Authentication failed${NC}"
            puts "⚠️  Possible causes:"
            puts "   • Incorrect username or password in config file"
            puts "   • Account locked or expired"
            puts "   • Network connectivity issues"
            catch {exec sudo pkill openfortivpn}
            exit 1
        }
        -re "Login.*failed|Invalid.*credentials" {
            puts "\n${RED}❌ Login failed${NC}"
            puts "⚠️  Please check your username and password in the config file"
            catch {exec sudo pkill openfortivpn}
            exit 1
        }
        -re "Authentication.*expired|Session.*expired|Token.*expired" {
            puts "\n${RED}❌ Authentication expired${NC}"
            puts "⚠️  Your session or credentials have expired"
            puts "ℹ️  This can happen if:"
            puts "   • The VPN session timed out"
            puts "   • Your account password has expired"
            puts "   • The OTP token took too long to submit"
            puts ""
            puts "💡 Please try running the script again"
            catch {exec sudo pkill openfortivpn}
            exit 1
        }
        timeout {
            puts "\n${RED}❌ Connection timeout${NC}"
            puts "⚠️  The VPN server is not responding within the expected time"
            puts "⚠️  Check your network connection and VPN server settings"
            catch {exec sudo pkill openfortivpn}
            exit 1
        }
        eof {
            if {$connection_started == 0} {
                puts "\n${RED}❌ Connection ended unexpectedly${NC}"
                puts "⚠️  The VPN process terminated before establishing connection"
                puts "ℹ️  Check your config file and network connectivity"
            } else {
                puts "\n${YELLOW}⚠️  VPN connection closed${NC}"
            }
            catch {exec sudo pkill openfortivpn}
            exit 1
        }
    }
}
EXPECT_EOF

# Make expect script executable
chmod +x /tmp/forti_expect.exp

echo "🎬 Starting automated connection process..."
echo ""

# Note: For password authentication, the expect script will handle sudo prompts
# Run the expect script which will handle both sudo and VPN authentication
/tmp/forti_expect.exp "$CONFIG_FILE" "$OTP_SCRIPT"

echo ""
echo "🏁 Session ended"
